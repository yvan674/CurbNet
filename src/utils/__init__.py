import numpy as np

def calculate_accuracy(ground_truth, predicted):
    """Calculate the intersection over union accuracy of the segmentation."

    Notes:
        ground_truth and predicted should be in arg_max format, and not one-hot.

    Args:
        ground_truth (torch.*Tensor): The ground truth data.
        predicted (torch.*Tensor): The predicted segmentation generated by
                                   the network. This should already be in
                                   arg max format.

    Returns:
        np.array: class-wise accuracy of the segmentation based on intersection
        over union accuracy, without the "other" class.
    """
    accuracy = np.array([0., 0., 0.])

    # First turn the arrays into numpy arrays for processing
    ground_truth = ground_truth.numpy()
    predicted = predicted.numpy()

    for i in range(3):
        # Calculate number of values in union
        union = np.count_nonzero((ground_truth == i) + (predicted == i))

        # Calculate number of intersecting values
        intersect = np.count_nonzero((ground_truth == 1) * (predicted == 1))

        # Return intersect over union, with special handling for union = 0
        if union == 0:
            if intersect == 0:
                accuracy[i] = 1.
            else:
                accuracy[i] = 0.
        else:
            accuracy[i] = float(intersect) / float(union)

    return accuracy